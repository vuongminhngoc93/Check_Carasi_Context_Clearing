#!/usr/bin/env python3
"""
Codebase Structure Review Script
Ph√¢n t√≠ch v√† review to√†n b·ªô c·∫•u tr√∫c module c·ªßa Check Context Clearing application
"""

import os
import glob
from pathlib import Path
from collections import defaultdict

def analyze_codebase_structure():
    """Ph√¢n t√≠ch v√† review c·∫•u tr√∫c codebase"""
    
    base_path = r"d:\5_Automation\Check_carasi_DF_ContextClearing"
    
    print("üèóÔ∏è CODEBASE STRUCTURE REVIEW")
    print("=" * 80)
    
    # Analyze main application files
    print("\nüì± APPLICATION CORE:")
    print("-" * 40)
    
    core_files = [
        "Form1.cs", "Form1.Designer.cs", "Form1.resx",
        "Form2.cs", "Form2.Designer.cs", "Form2.resx", 
        "Program.cs", "App.config",
        "Check_carasi_DF_ContextClearing.csproj",
        "Check_carasi_DF_ContextClearing.sln"
    ]
    
    for file in core_files:
        file_path = os.path.join(base_path, file)
        if os.path.exists(file_path):
            size = os.path.getsize(file_path) / 1024
            print(f"‚úÖ {file:<35} ({size:.1f} KB)")
        else:
            print(f"‚ùå {file:<35} (Missing)")
    
    # Analyze Library folder
    print("\nüìö LIBRARY COMPONENTS:")
    print("-" * 40)
    
    library_path = os.path.join(base_path, "Library")
    if os.path.exists(library_path):
        for file in os.listdir(library_path):
            if file.endswith(('.cs', '.dll', '.xml')):
                file_path = os.path.join(library_path, file)
                size = os.path.getsize(file_path) / 1024
                print(f"‚úÖ Library/{file:<30} ({size:.1f} KB)")
    
    # Analyze View folder
    print("\nüé® VIEW COMPONENTS:")
    print("-" * 40)
    
    view_path = os.path.join(base_path, "View")
    if os.path.exists(view_path):
        for file in os.listdir(view_path):
            if file.endswith(('.cs', '.resx', '.Designer.cs')):
                file_path = os.path.join(view_path, file)
                size = os.path.getsize(file_path) / 1024
                print(f"‚úÖ View/{file:<32} ({size:.1f} KB)")
    
    # Analyze Modules structure
    print("\nüèóÔ∏è MODULES ARCHITECTURE:")
    print("-" * 40)
    
    modules_path = os.path.join(base_path, "Modules")
    if os.path.exists(modules_path):
        for module_name in os.listdir(modules_path):
            module_path = os.path.join(modules_path, module_name)
            if os.path.isdir(module_path):
                print(f"\nüìÅ {module_name.upper()} MODULE:")
                
                # Count different file types
                file_counts = defaultdict(int)
                total_size = 0
                
                for root, dirs, files in os.walk(module_path):
                    for file in files:
                        file_path = os.path.join(root, file)
                        try:
                            size = os.path.getsize(file_path)
                            total_size += size
                            
                            # Categorize by extension
                            ext = os.path.splitext(file)[1].lower()
                            if ext in ['.py']:
                                file_counts['Python Scripts'] += 1
                            elif ext in ['.cs']:
                                file_counts['C# Files'] += 1
                            elif ext in ['.md']:
                                file_counts['Documentation'] += 1
                            elif ext in ['.csv']:
                                file_counts['Log/Data Files'] += 1
                            elif ext in ['.csproj']:
                                file_counts['Project Files'] += 1
                            elif ext in ['.bat', '.ps1']:
                                file_counts['Scripts'] += 1
                            elif ext in ['.zip', '.exe']:
                                file_counts['Binaries/Archives'] += 1
                            else:
                                file_counts['Other Files'] += 1
                                
                        except (OSError, IOError):
                            pass
                
                # Display file statistics
                for category, count in file_counts.items():
                    print(f"   üìÑ {category:<20}: {count:>3} files")
                
                print(f"   üíæ Total Size: {total_size / (1024*1024):.1f} MB")
    
    # Analyze remaining root files
    print("\nüìã REMAINING ROOT FILES:")
    print("-" * 40)
    
    # Get all files in root that haven't been moved
    all_files = []
    for file in os.listdir(base_path):
        file_path = os.path.join(base_path, file)
        if os.path.isfile(file_path) and not file.startswith('.'):
            all_files.append(file)
    
    # Categorize remaining files
    categories = {
        'Core Application': ['.cs', '.csproj', '.sln', '.config', '.resx'],
        'Resources': ['.ico', '.dll', '.xml'],
        'Temporary/Build': ['.diagsession'],
        'Unknown': []
    }
    
    categorized = defaultdict(list)
    
    for file in all_files:
        ext = os.path.splitext(file)[1].lower()
        categorized_flag = False
        
        for category, extensions in categories.items():
            if category != 'Unknown' and ext in extensions:
                categorized[category].append(file)
                categorized_flag = True
                break
        
        if not categorized_flag:
            categorized['Unknown'].append(file)
    
    for category, files in categorized.items():
        if files:
            print(f"\nüè∑Ô∏è {category}:")
            for file in sorted(files):
                file_path = os.path.join(base_path, file)
                size = os.path.getsize(file_path) / 1024
                print(f"   üìÑ {file:<35} ({size:.1f} KB)")

def generate_structure_summary():
    """T·∫°o summary v·ªÅ c·∫•u tr√∫c t·ªïng th·ªÉ"""
    
    print("\n\nüéØ STRUCTURE SUMMARY:")
    print("=" * 80)
    
    recommendations = [
        "‚úÖ Core application files organized properly",
        "‚úÖ Modules architecture implemented successfully",
        "‚úÖ Tests consolidated in Tests module",
        "‚úÖ Documentation centralized in Documentation module", 
        "‚úÖ Performance tools in Performance module",
        "‚úÖ Logs organized in Logs module",
        "‚úÖ Deployment packages in Deployment module",
        "‚úÖ Clear separation of concerns achieved"
    ]
    
    for rec in recommendations:
        print(rec)
    
    print("\nüìä MODULE BENEFITS:")
    print("-" * 40)
    benefits = [
        "üéØ Improved maintainability - Each module has clear responsibility",
        "üîç Better discoverability - Easy to find specific files",
        "‚ö° Enhanced development workflow - Organized development process", 
        "üöÄ Streamlined deployment - Centralized deployment packages",
        "üìà Better performance monitoring - Dedicated performance tools",
        "üìù Centralized documentation - All guides in one place",
        "üß™ Comprehensive testing - All test tools organized",
        "üìã Historical tracking - Centralized log management"
    ]
    
    for benefit in benefits:
        print(benefit)
    
    print("\nüîß NEXT STEPS:")
    print("-" * 40)
    next_steps = [
        "1. Update project references ƒë·ªÉ point to new module structure",
        "2. Update CI/CD scripts ƒë·ªÉ work v·ªõi new organization", 
        "3. Review v√† update documentation links",
        "4. Test deployment process v·ªõi new structure",
        "5. Train team members v·ªÅ new module organization",
        "6. Set up automated module validation scripts"
    ]
    
    for step in next_steps:
        print(step)

def check_module_integrity():
    """Ki·ªÉm tra t√≠nh to√†n v·∫πn c·ªßa module structure"""
    
    print("\n\nüîç MODULE INTEGRITY CHECK:")
    print("=" * 80)
    
    base_path = r"d:\5_Automation\Check_carasi_DF_ContextClearing"
    modules_path = os.path.join(base_path, "Modules")
    
    required_modules = ['Tests', 'Documentation', 'Performance', 'Logs', 'Deployment']
    
    for module in required_modules:
        module_path = os.path.join(modules_path, module)
        readme_path = os.path.join(module_path, "README.md")
        
        if os.path.exists(module_path):
            file_count = len([f for f in os.listdir(module_path) if os.path.isfile(os.path.join(module_path, f))])
            
            if os.path.exists(readme_path):
                print(f"‚úÖ {module} Module: {file_count} files, README present")
            else:
                print(f"‚ö†Ô∏è  {module} Module: {file_count} files, README missing")
        else:
            print(f"‚ùå {module} Module: Missing")
    
    print(f"\nüìÅ Total modules: {len([d for d in os.listdir(modules_path) if os.path.isdir(os.path.join(modules_path, d))])}")

if __name__ == "__main__":
    analyze_codebase_structure()
    generate_structure_summary()
    check_module_integrity()
    
    print("\n\nüéâ CODEBASE STRUCTURE REVIEW COMPLETE!")
    print("Module organization successfully implemented!")
